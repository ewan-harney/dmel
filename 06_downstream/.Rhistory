seqs
names(seqs) <- seqs
seqs
mult <- msa(seqs, method="ClustalW", type="dna", order="input")
View(mult)
seqs <- getSequences(asvs_short)
phang.align <- as.phyDat(mult, type="DNA", names=seqs)
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
)
fitGTR$tree
taxa <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//megan_taxonpath_out.tsv", header = T)
taxa <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//megan_taxonpath_out.tsv", header = F)
colnames(taxa) <- c("asv","domain","kingdom","phylum","class","order","family","genus","species","subspecies")
counts <- asvs[,c(1, 14:85)]
counts_short<-unique(counts[,c(2:73])
counts_short<-unique(counts[,c(2:73)])
head(counts_short)
counts
row.names(counts) <- counts$asv
counts <- unique(asvs[,c(1,14:85)])
row.names(counts) <- counts$asv
counts
taxmat <- as.matrix(taxa)
View(taxmat)
row.names(taxa) <- taxa$asv
taxa_short <- taxa[,c(2:10)]
taxa <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//megan_taxonpath_out.tsv", header = F)
colnames(taxa) <- c("asv","domain","kingdom","phylum","class","order","family","genus","species","subspecies")
row.names(taxa) <- taxa$asv
taxa_dups < -duplicated(taxa[,1])
taxa_dups <- duplicated(taxa[,1])
taxa[which(taxa_dups == FALSE)]
taxa$asv[which(taxa_dups == FALSE)]
taxa <- taxa[which(taxa_dups == FALSE),]
row.names(taxa) <- taxa$asv
taxa_short <- taxa[,c(2:10)]
taxmat <- as.matrix(taxa_short)
otumat <- as.matrix(counts)
View(otumat)
counts_short <- counts[,c(2:73)]
otumat <- as.matrix(counts_short)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
OTU
TAX
physeq = phyloseq(OTU, TAX)
physeq
plot_bar(physeq, fill = "Family")
plot_bar(physeq, fill = "family")
plot_bar(physeq, fill = "phylum")
plot_bar(physeq, fill = "class")
plot_bar(physeq, fill = "order")
plot_bar(physeq, fill = "family")
sample_data <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//CEPH_samples.tsv", header = T)
sample_data <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//CEPH_samples.tsv", header = T, row.names = 1)
View(sample_data)
sample_data <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//CEPH_samples.tsv", header = T, row.names = 1)
View(sample_data)
ps <- phyloseq(tax_table(taxmat),
sample_data(sample_data),
otu_table(otumat, taxa_are_rows = TRUE),
phy_tree(fitGTR$tree))
taxmat
otumat
fitGTR$tree
seqs <- getSequences(asvs_short)
seqs<-asvs_short[,2]
seqs
names(seqs) <- asvs_short[,1]
seqs
mult <- msa(seqs, method="ClustalW", type="dna", order="input")
phang.align <- as.phyDat(mult, type="DNA", names=seqs)
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
rm(fitGTR)
seqs<-asvs_short[,2]
names(seqs) <- seqs
mult <- msa(seqs, method="ClustalW", type="dna", order="input")
phang.align <- as.phyDat(mult, type="DNA", names=seqs)
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
row.names(asvs_short) <- asvs_short$asv
seqs<-asvs_short[,2]
names(seqs) <- asvs_short[,1]
seqs
mult <- msa(seqs, method="ClustalW", type="dna", order="input")
phang.align <- as.phyDat(mult, type="DNA", names=seqs)
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
library(phyloseq)
library(microbiome)
library(ape)
library(vegan)
library(IRdisplay)
library(phangorn)
library(msa)
library(dada2)
### Construct a phylogeny
asvs <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//ASV_taxa_seq_counts.tsv", header = T)
asvs_short <- unique(asvs[,c(1,13)])
asvs_dups < -duplicated(asvs[,c(1,13)])
asvs_dups <- duplicated(asvs[,c(1,13)])
asvs_dups
row.names(asvs_short) <- asvs_short$asv
seqs<-asvs_short[,2]
names(seqs) <- asvs_short[,1]
mult <- msa(seqs, method="ClustalW", type="dna", order="input")
phang.align <- as.phyDat(mult, type="DNA", names=seqs)
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
head(seqs)
names(seqs) <- asvs_short[,1]
head(seqs)
phang.align <- as.phyDat(mult, type="DNA", names=seqs)
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
mult <- msa(seqs, method="ClustalW", type="dna", order="input")
phang.align <- as.phyDat(mult, type="DNA", names=seqs)
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
####
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR", optInv=TRUE, optGamma=TRUE,
rearrangement = "stochastic", control = pml.control(trace = 0))
fitGTR$tree
ps <- phyloseq(tax_table(taxmat),
sample_data(sample_data),
otu_table(otumat, taxa_are_rows = TRUE),
phy_tree(fitGTR$tree))
taxa <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//megan_taxonpath_out.tsv", header = F)
colnames(taxa) <- c("asv","domain","kingdom","phylum","class","order","family","genus","species","subspecies")
taxa_dups <- duplicated(taxa[,1])
taxa <- taxa[which(taxa_dups == FALSE),]
row.names(taxa) <- taxa$asv
taxa_short <- taxa[,c(2:10)]
counts <- unique(asvs[,c(1,14:85)])
row.names(counts) <- counts$asv
counts_short <- counts[,c(2:73)]
taxmat <- as.matrix(taxa_short)
otumat <- as.matrix(counts_short)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
OTU
TAX
physeq = phyloseq(OTU, TAX)
physeq
plot_bar(physeq, fill = "family")
sample_data <- read.table("C://Users//ewanh//Dropbox//Sheffield_NEOF//Saleh_metabarcoding//CEPH18S//CEPH_samples.tsv", header = T, row.names = 1)
physeq1 = merge_phyloseq(physeq, sample_data, random_tree)
ps <- phyloseq(tax_table(taxmat),
sample_data(sample_data),
otu_table(otumat, taxa_are_rows = TRUE),
phy_tree(fitGTR$tree))
ps
?system2
cutadapt <- "//wsl.localhost/Ubuntu/home/ewan_unix/miniconda3/lib/python3.12/site-packages/cutadapt"
system2(cutadapt, args = "--help")
cutadapt <- "/wsl.localhost/Ubuntu/home/ewan_unix/miniconda3/lib/python3.12/site-packages/cutadapt"
system2(cutadapt, args = "--help")
shell(cmd="wsl")
cutadapt
system2(cutadapt, args = "--help")
>shell(cmd="wsl ls")
shell(cmd="wsl ls")
x=5
1-X
1-x
1-(x/100)
?make.option
?make_option
citation()
library(lme4)
citation("lme4")
citation("MASS")
library(car)
citation("car")
fnFs.cut <- 1-8-4b_1_bulk_soil_bacteria_ATCCATCCTC-CTAGACGAGC_L001_R1.fastq.gz
fnFs.cut <- "1-8-4b_1_bulk_soil_bacteria_ATCCATCCTC-CTAGACGAGC_L001_R1.fastq.gz"
# extract sample names and write to R object
sample.names <- unname(sapply(fnFs.cut, get.sample.name))
# Extract sample names
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][2]
# extract sample names and write to R object
sample.names <- unname(sapply(fnFs.cut, get.sample.name))
sample.names
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][3]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][1]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "1")[[1]][1]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "1")[[1]][2]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-")[[1]][2]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-")[[2]][2]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-")[[1]][2]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-")[[1]][2,3,4]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-")[[1]][c(2,3,4)]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-")[[1]][c(2 34)]
get.sample.name <- function(fname) strsplit(basename(fname), "-")[[1]][4]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|-")[[1]][4]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|-")[[1]][3]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][3]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[3]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]]c([3][4])
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][c(3,4)]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][4]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][3+4]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][3][4]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]]c([3][4])
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][c([3][4])]
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][[3][4]]
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][2:4]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][2:6]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][2:5]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][3:6]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name.full <- function(fname) strsplit(basename(fname), "_")[[1]]
get.sample.name.full <- function(fname) strsplit(basename(fname), "_")[[1]]
longfilenameFUN <- function(i){
paste(
unlist(i)[1:length(unlist(i))-1], collapse = "_"
)
}
(unname(sapply(fnFs.cut, get.sample.name.full)),longfilenameFUN)
unname(sapply(fnFs.cut, get.sample.name.full)),longfilenameFUN
sample.names <- sapply(unname(sapply(fnFs.cut, get.sample.name.full)),longfilenameFUN)
sapply(unname(sapply(fnFs.cut, get.sample.name.full)),longfilenameFUN)
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "-|_")[[1]][4]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) paste(strsplit(basename(fname), "-|_")[[1]][3],strsplit(basename(fname), "-|_")[[1]][4])
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) paste(strsplit(basename(fname), "-|_")[[1]][3],strsplit(basename(fname), "-|_")[[1]][4], sep = "-")
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) paste(strsplit(basename(fname), "-|_")[[1]][3],
strsplit(basename(fname), "-|_")[[1]][4],
strsplit(basename(fname), "-|_")[[1]][5],
strsplit(basename(fname), "-|_")[[1]][6],sep = "-")
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) paste(strsplit(basename(fname), "-|_")[[1]][3],
strsplit(basename(fname), "-|_")[[1]][4],
strsplit(basename(fname), "-|_")[[1]][5],
strsplit(basename(fname), "-|_")[[1]][6],sep = "_")
unname(sapply(fnFs.cut, get.sample.name))
fnFs.cut<-Abd-MiFish-year2-A134_S23_L001_R1_001.fastq.gz
fnFs.cut<-"Abd-MiFish-year2-A134_S23_L001_R1_001.fastq.gz"
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][2]
sample.names <- unname(sapply(fnFs.cut, get.sample.name))
unname(sapply(fnFs.cut, get.sample.name))
fnFs.cut<-"10rep-Y1_R1_001.fastq.gz"
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][2]
unname(sapply(fnFs.cut, get.sample.name))
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][1]
unname(sapply(fnFs.cut, get.sample.name))
library("phyloseq"); packageVersion("phyloseq")
?remove_taxa
knitr::opts_chunk$set(echo = TRUE)
# remove any existing objects in the environment
rm(list=ls(all=TRUE))
# load packages
library(bookdown)
library(lme4) # for mixed effects (longitudinal) models
library(car) # for obtaining P values from mixed effects models
library(ggplot2) # for plotting some figures
library(dplyr) # for data wrangling
library(cowplot) # for making some composite plots
library(pheatmap) # for heatmap
workingDir = "C:/Users/ewanh/Dropbox/Jobs_2024/CBF_Liverpool/ProteomicsTask/";
setwd(workingDir);
# protein names as row names to aid trasposition
data <- read.csv("ProteomicsData_TaskDataScienceJob.csv", header = T, row.names = 1)
meta <- read.csv("Metadata_TaskDataScienceJob.csv", header = T)
# code all metadata variables as factors
mfactors <- names(meta)[c(2,4:5)]
# check
mfactors
meta[,mfactors] <- lapply(meta[,mfactors] , factor)
# transpose data
t_data<-t(data)
# merge with meta to make single object for interrogation
protdata<-merge(meta, t_data, by.x = "Sample_ID", by.y = 0)
# run linear model for all proteins
# select proteins
protnames<-names(protdata[6:226])
# loop through each protein
protmodels <- lapply(protnames, function(x) {
lme4::lmer(substitute(i ~ Group + (Day|Mouse), list(i = as.name(x))), data = protdata)
})
# loop through models
protmodels2 <- lapply(protnames, function(x) {
lme4::lmer(substitute(i ~ Group + (1|Mouse), list(i = as.name(x))), data = protdata[protdata$Day=='49',])
})
```{r Redo analysis with only day 49 data, message = F, warning = F, error = F}
# loop through models
protmodels2 <- lapply(protnames, function(x) {
lme4::lmer(substitute(i ~ Group + (1|Mouse), list(i = as.name(x))), data = protdata[protdata$Day=='49',])
})
ranef(protmodels2[[1]])
fixef(protmodels2[[1]])
?isSingular
isSingular(protmodels2[[1]])
isSingular(protmodels[[1]])
isSingular(protmodels[[2]])
ranef(protmodels2[[2]])
fixef(protmodels2[[2]])
isSingular(protmodels[[2]])
isSingular(protmodelss[[2]])
isSingular(protmodels2[[2]])
isSinglular(protmodels[[1]])
```{r Check output of the model}
# loop through each protein
protmodels <- lapply(protnames, function(x) {
lme4::lmer(substitute(i ~ Group + (Day|Mouse), list(i = as.name(x))), data = protdata)
})
isSingular(protmodels[[1]])
isSingular(protmodels[[2]])
fixef(protmodels[[1]])
fixef(protmodels[[2]])
# loop through each protein
protmodels <- lapply(protnames, function(x) {
lme4::lmer(substitute(i ~ Group + (1|Day), list(i = as.name(x))), data = protdata)
})
```{r Check output of the model}
isSingular(protmodels[[1]])
isSingular(protmodels[[2]])
ranef(protmodels[[1]])
ranef(protmodels[[2]])
fixef(protmodels[[1]])
fixef(protmodels[[2]])
```{r Obtain and extract statistics from models}
# loop through car::Anova to obtain p-vals
prot_anovas<-lapply(protmodels,car::Anova)
# loop through car::Anova to obtain p-vals
prot_anovas<-lapply(protmodels,car::Anova)
# extract chisq values from list
prot_chisq<-sapply(prot_anovas,"[[",1)
# extract chisq values from list
prot_chisq<-sapply(prot_anovas,"[[",1)
# extract p-values from list
prot_pvals<-sapply(prot_anovas,"[[",3)
# adjust pvalues for multiple comparison
prot_adjp<-p.adjust(prot_pvals, method = "BH")
sum(prot_adjp < 0.05)
?pheatmap
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][2]
sample.names <- unname(sapply(fnFs.cut, get.sample.name))
sample.names
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][1]
sample.names
sample.names <- unname(sapply(fnFs.cut, get.sample.name))
sample.names
fnFs.cut
# load required packages
library(eulerr)
# clear environment
rm(list=ls(all=TRUE))
install.packages("syntenyPlotteR")
library(syntenyPlotteR)
library(tximport)
library(DESeq2)
library(org.Dm.eg.db)
library(EnhancedVolcano)
library(edgeR)
library(limma)
library(dplyr)
library(eulerr)
library(ggplot2)
library(ggblend)
library(ggrepel)
library(clusterProfiler)
library(rrvgo)
library(chisq.posthoc.test)
################################################################
################################################################
# 1. DEseq2 for RNA
################################################################
################################################################
# clear environment
rm(list=ls(all=TRUE))
# Load required packages
library(tximport)
library(DESeq2)
library(org.Dm.eg.db)
library(EnhancedVolcano)
getwd()
# Set working directory for whole script: SuppMat
workingDir = "C:/Users/ewanh/Dropbox/Barcelona_IBE/WP1/SuppMat/Interchromate_Data/06_interchromate_downstream";
setwd(workingDir);
getwd();
# Can load it later if already complete
load("interchromate_downstream/interchromate_integrated_results_250203.Rdata")
# Can load it later if already complete
load("interchromate_integrated_results_250203.Rdata")
##########################
# 7.4.1 Manz F3 up, F6 up
M_3up6up_enrich <- enrichGO(gene = M_3up6up_sig ,
OrgDb = org.Dm.eg.db,keyType = 'FLYBASE', readable = T,
ont = "BP",
universe = DmelBG_All,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
# Subset Manz data by directions of F3 and F6 LFC
M_intergen_3up6up <- subset(Manz_intergen, (RNAseq.log2FoldChange.x > 0 & RNAseq.log2FoldChange.y > 0))
M_intergen_3up6dn <- subset(Manz_intergen, (RNAseq.log2FoldChange.x > 0 & RNAseq.log2FoldChange.y < 0))
M_intergen_3dn6up <- subset(Manz_intergen, (RNAseq.log2FoldChange.x < 0 & RNAseq.log2FoldChange.y > 0))
M_intergen_3dn6dn <- subset(Manz_intergen, (RNAseq.log2FoldChange.x < 0 & RNAseq.log2FoldChange.y < 0))
# Select gene IDs that were significantly DE in both F3 qand F6 in Manz
M_3up6up_sig <- M_intergen_3up6up[M_intergen_3up6up$ensembl_gene_id %in% LIST_rna2.ids[['F3M_F6M_ovlp_NoGenM']],]$ensembl_gene_id
load("deseq2_atacseq_lists_250203.Rdata")
# Load lists of DE and DA genes if sections 1 and 2 have already run
load("deseq2_rnaseq_lists_250203.Rdata")
# Subset Manz data by directions of F3 and F6 LFC
M_intergen_3up6up <- subset(Manz_intergen, (RNAseq.log2FoldChange.x > 0 & RNAseq.log2FoldChange.y > 0))
M_intergen_3up6dn <- subset(Manz_intergen, (RNAseq.log2FoldChange.x > 0 & RNAseq.log2FoldChange.y < 0))
M_intergen_3dn6up <- subset(Manz_intergen, (RNAseq.log2FoldChange.x < 0 & RNAseq.log2FoldChange.y > 0))
M_intergen_3dn6dn <- subset(Manz_intergen, (RNAseq.log2FoldChange.x < 0 & RNAseq.log2FoldChange.y < 0))
# Select gene IDs that were significantly DE in both F3 qand F6 in Manz
M_3up6up_sig <- M_intergen_3up6up[M_intergen_3up6up$ensembl_gene_id %in% LIST_rna2.ids[['F3M_F6M_ovlp_NoGenM']],]$ensembl_gene_id
M_3up6dn_sig <- M_intergen_3up6dn[M_intergen_3up6dn$ensembl_gene_id %in% LIST_rna2.ids[['F3M_F6M_ovlp_NoGenM']],]$ensembl_gene_id
M_3dn6up_sig <- M_intergen_3dn6up[M_intergen_3dn6up$ensembl_gene_id %in% LIST_rna2.ids[['F3M_F6M_ovlp_NoGenM']],]$ensembl_gene_id
M_3dn6dn_sig <- M_intergen_3dn6dn[M_intergen_3dn6dn$ensembl_gene_id %in% LIST_rna2.ids[['F3M_F6M_ovlp_NoGenM']],]$ensembl_gene_id
##########################
# 7.4.1 Manz F3 up, F6 up
M_3up6up_enrich <- enrichGO(gene = M_3up6up_sig ,
OrgDb = org.Dm.eg.db,keyType = 'FLYBASE', readable = T,
ont = "BP",
universe = DmelBG_All,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
DmelBG_A <- Akaa_intergen$ensembl_gene_id
DmelBG_M <- Manz_intergen$ensembl_gene_id
DmelBG_All<-unique(sort(c(DmelBG_A,DmelBG_M)))
##########################
# 7.4.1 Manz F3 up, F6 up
M_3up6up_enrich <- enrichGO(gene = M_3up6up_sig ,
OrgDb = org.Dm.eg.db,keyType = 'FLYBASE', readable = T,
ont = "BP",
universe = DmelBG_All,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
sum(M_3up6up_enrich@result$p.adjust<0.05)
##########################
# 7.4.2 Manz F3 up, F6 down
M_3up6dn_enrich <- enrichGO(gene = M_3up6dn_sig ,
OrgDb = org.Dm.eg.db,keyType = 'FLYBASE', readable = T,
ont = "BP",
universe = DmelBG_All,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
sum(M_3up6dn_enrich@result$p.adjust < 0.05)
##########################
#7.4.3 Manz F3 dn, F6 up
M_3dn6up_enrich <- enrichGO(gene = M_3dn6up_sig ,
OrgDb = org.Dm.eg.db,keyType = 'FLYBASE', readable = T,
ont = "BP",
universe = DmelBG_All,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
sum(M_3dn6up_enrich@result$p.adjust < 0.05)
##########################
# 7.4.4 Manz F3 dn, F6 dn
M_3dn6dn_enrich <- enrichGO(gene = M_3dn6dn_sig ,
OrgDb = org.Dm.eg.db,keyType = 'FLYBASE', readable = T,
ont = "BP",
universe = DmelBG_All,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
sum(M_3dn6dn_enrich@result$p.adjust < 0.05)
